# Read data
setwd('E:/博一下/课程-模式识别/第四次作业 SVM/Programming/problem7')
x <- as.data.frame(read.table("data.txt", header=T))
x$category <- as.factor(x$category)
# Preprocess data: appending extra dimensions
x$'1' <- 1
x$'x1^2' <- (x$x1)^2
x$'x2^2' <- (x$x2)^2
x$'x1x2' <- (x$x1)*(x$x2)
x <- x[, c('category','1','x1','x2','x1x2','x1^2','x2^2')]
# Extract trainning set
w1 <- x[x$category==1,]
w2 <- x[x$category==2,]
trainSet1 <- rbind(w1[1:1, ],w2[1:1, ])
trainSet2 <- rbind(w1[1:2, ],w2[1:2, ])
trainSet3 <- rbind(w1[1:3, ],w2[1:3, ])
trainSet4 <- rbind(w1[1:4, ],w2[1:4, ])
#plot(x$'x1' , x$'x2', col=x$'category', type = 'p', cex=2, pch=16,
#     xlab="X1",ylab="X2")
# Train and Validate
library(e1071)
## train with first 1 points
svm_model <- svm(trainSet1$category ~ ., trainSet1,kernel="linear")
#summary(svm_model)
predicted <- predict(svm_model, x)
validated <- (predicted==x$category)
sprintf("misclassified=%d/%d, ratio=%f",
length(validated[validated==FALSE]),
length(predicted),
length(validated[validated==FALSE])/length(predicted))
## train with first 2 points
svm_model <- svm(trainSet2$category ~ ., trainSet2,kernel="linear")
#summary(svm_model)
predicted <- predict(svm_model, x)
validated <- (predicted==x$category)
sprintf("misclassified=%d/%d, ratio=%f",
length(validated[validated==FALSE]),
length(predicted),
length(validated[validated==FALSE])/length(predicted))
## train with first 3 points
svm_model <- svm(trainSet3$category ~ ., trainSet3,kernel="linear")
#summary(svm_model)
predicted <- predict(svm_model, x)
validated <- (predicted==x$category)
sprintf("misclassified=%d/%d, ratio=%f",
length(validated[validated==FALSE]),
length(predicted),
length(validated[validated==FALSE])/length(predicted))
## train with first 4 points
svm_model <- svm(trainSet4$category ~ ., trainSet4,kernel="linear")
#summary(svm_model)
predicted <- predict(svm_model, x)
validated <- (predicted==x$category)
sprintf("misclassified=%d/%d, ratio=%f",
length(validated[validated==FALSE]),
length(predicted),
length(validated[validated==FALSE])/length(predicted))
library(Rcmdr)
scatter3d(x$'1', x$x1, x$x2)
class(x$`1)
)))))
)))))))))))))
`)
class(x$`1`)
scatter3d(x$'x1', x$'x2', x$'x1x2')
?scatter3d
?plot3d
scatter3d(x$'x1', x$'x2', x$'x1x2', col=x$'category')
scatter3d(x$'x1', x$'x2', x$'x1x2', col=rainbow(1000))
scatter3d(x$'x1', x$'x2', x$'x1x2', col=rainbow(1000))
plot3d(x$'x1', x$'x2', x$'x1x2', col=x$'category')
library(rgl)
plot3d(x$'x1', x$'x2', x$'x1x2', col=x$'category')
plot3d(x$'x1', x$'x2', x$'x1x2', col=x$'category',
xlab='$x1$')
plot3d(x$'x1', x$'x2', x$'x1x2', col=x$'category',xlab='x1', ylab='x2',zlab='x3')
plot3d(x$'x1', x$'x2', x$'x1x2', col=x$'category',xlab='x1', ylab='x2',zlab='x3' ,size=3)
plot3d(x$'x1', x$'x2', x$'x1x2', col=x$'category',xlab='x1', ylab='x2',zlab='x3' ,radius=3)
plot3d(x$'x1', x$'x2', x$'x1x2', col=x$'category',xlab='x1', ylab='x2',zlab='x3' ,expand=3)
plot3d(x$'x1', x$'x2', x$'x1x2', col=x$'category',xlab='x1', ylab='x2',zlab='x3' ,lwd=3)
plot3d(x$'x1', x$'x2', x$'x1x2', col=x$'category',xlab='x1', ylab='x2',zlab='x3' ,lwd=30)
plot3d(x$'x1', x$'x2', x$'x1x2', col=x$'category',xlab='x1', ylab='x2',zlab='x3', type='s', size=30)
plot3d(x$'x1', x$'x2', x$'x1x2', col=x$'category',xlab='x1', ylab='x2',zlab='x3', type='s', size=6)
plot3d(x$'x1', x$'x2', x$'x1x2', col=x$'category',xlab='x1', ylab='x2',zlab='x3', type='s', size=3.5)
plot3d(x$'x1', x$'x2', x$'x1x2', col=x$'category',xlab='x1', ylab='x2',zlab='x3', type='s', size=2.4)
plot3d(x$'x1', x$'x2', x$'x1x2', col=x$'category',xlab='x1', ylab='x2',zlab='x1x2', type='s', size=2.4)
plot3d(x$'1', x$'x2', x$'x1', col=x$'category',xlab='x1', ylab='x2',zlab='x1x2', type='s', size=2.4)
plot3d(x$'x1', x$'x2', x$'x1^2', col=x$'category',xlab='x1', ylab='x2',zlab='x1^2', type='s', size=2.4)
plot3d(x$'x1', x$'x2', x$'x2^2', col=x$'category',
xlab='x1', ylab='x2',zlab='x2^2', type='s', size=2.4)
plot3d(x$'x1', x$'x2^2', x$'x2^2', col=x$'category',
xlab='x1', ylab='x2^2',zlab='x2^2', type='s', size=2.4)
plot3d(x$'x1^2', x$'x2^2', x$'x1x2', col=x$'category',
xlab='x1^2', ylab='x2^2',zlab='x1x2', type='s', size=2.4)
# Read data
setwd('E:/博一下/课程-模式识别/第四次作业 SVM/Programming/problem7')
x <- as.data.frame(read.table("data.txt", header=T))
x$category <- as.factor(x$category)
# Preprocess data: appending extra dimensions
x$'1' <- 1
x$'x1^2' <- (x$x1)^2
x$'x2^2' <- (x$x2)^2
x$'x1x2' <- (x$x1)*(x$x2)
x <- x[, c('category','1','x1','x2','x1x2','x1^2','x2^2')]
# Extract trainning set
w1 <- x[x$category==1,]
w2 <- x[x$category==2,]
trainSet1 <- rbind(w1[1:1, ],w2[1:1, ])
trainSet2 <- rbind(w1[1:2, ],w2[1:2, ])
trainSet3 <- rbind(w1[1:3, ],w2[1:3, ])
trainSet4 <- rbind(w1[1:4, ],w2[1:4, ])
#plot(x$'x1' , x$'x2', col=x$'category', type = 'p', cex=2, pch=16,
#     xlab="X1",ylab="X2")
# Train and Validate
library(e1071)
## train with first 1 points
svm_model <- svm(trainSet1$category ~ ., trainSet1,kernel="linear")
#summary(svm_model)
predicted <- predict(svm_model, x)
validated <- (predicted==x$category)
sprintf("misclassified=%d/%d, ratio=%f",
length(validated[validated==FALSE]),
length(predicted),
length(validated[validated==FALSE])/length(predicted))
## train with first 2 points
svm_model <- svm(trainSet2$category ~ ., trainSet2,kernel="linear")
#summary(svm_model)
predicted <- predict(svm_model, x)
validated <- (predicted==x$category)
sprintf("misclassified=%d/%d, ratio=%f",
length(validated[validated==FALSE]),
length(predicted),
length(validated[validated==FALSE])/length(predicted))
## train with first 3 points
svm_model <- svm(trainSet3$category ~ ., trainSet3,kernel="linear")
#summary(svm_model)
predicted <- predict(svm_model, x)
validated <- (predicted==x$category)
sprintf("misclassified=%d/%d, ratio=%f",
length(validated[validated==FALSE]),
length(predicted),
length(validated[validated==FALSE])/length(predicted))
## train with first 4 points
svm_model <- svm(trainSet4$category ~ ., trainSet4,kernel="linear")
#summary(svm_model)
predicted <- predict(svm_model, x)
validated <- (predicted==x$category)
sprintf("misclassified=%d/%d, ratio=%f",
length(validated[validated==FALSE]),
length(predicted),
length(validated[validated==FALSE])/length(predicted))
plot3d(x$'x1', x$'x2', x$'x1x2', col=x$'category',
xlab='x1', ylab='x2',zlab='x1x2', type='s', size=2.4)
plot3d(x$'x1', x$'x2', x$'x1^2', col=x$'category',
xlab='x1', ylab='x2',zlab='x1^2', type='s', size=2.4)
plot3d(x$'x1', x$'x2', x$'x2^2', col=x$'category',
xlab='x1', ylab='x2',zlab='x2^2', type='s', size=2.4)
plot3d(x$'x1', x$'x2^2', x$'x2^2', col=x$'category',
xlab='x1', ylab='x2^2',zlab='x2^2', type='s', size=2.4)
plot3d(x$'x1^2', x$'x2^2', x$'x1x2', col=x$'category',
xlab='x1^2', ylab='x2^2',zlab='x1x2', type='s', size=2.4)
svm_model
svm_model$coefs
t(svm_model$coefs)
svm_model$SV
?svm
table(Actual=x$category, Fitted=predicted)
t(svm_model$coefs) %*% svm_model$SV
svm_model$rho
w
w <- svm_model$coefs
w
w
svm_model
svm_model$coef0
svm_model$decision.values
svm_model$coef
svm_model$coefs
t(svm_model$coefs) %*% svm_model$SV
w <- t(svm_model$coefs) %*% svm_model$SV
w
cbind(x$`1`,x$x1,x$x2,x$x1x2,x$`x2^2`)
as.matrix(cbind(x$`1`,x$x1,x$x2,x$x1x2,x$`x2^2)`)
)
as.matrix(cbind(x$`1`,x$x1,x$x2,x$x1x2,x$`x2^2`))
as.matrix(cbind(x$`1`,x$x1,x$x2,x$x1x2,x$`x2^2`))
as.matrix(cbind(x$`1`,x$x1,x$x2,x$x1x2,x$`x2^2`))
w%*%t(as.matrix(cbind(x$`1`,x$x1,x$x2,x$x1x2,x$`x2^2`)))
w%*%(as.matrix(cbind(x$`1`,x$x1,x$x2,x$x1x2,x$`x2^2`)))
(as.matrix(cbind(x$`1`,x$x1,x$x2,x$x1x2,x$`x2^2`)))
w
(as.matrix(cbind(x$`1`,x$x1,x$x2,x$x1x2,x$`x2^2`)))[1]
(as.matrix(cbind(x$`1`,x$x1,x$x2,x$x1x2,x$`x2^2`)))[1,]
(as.matrix(cbind(x$`1`,x$x1,x$x2,x$x1x2,x$`x2^2`)))[1,]%*%w
w*(as.matrix(cbind(x$`1`,x$x1,x$x2,x$x1x2,x$`x2^2`)))[1,]
w%*%(as.matrix(cbind(x$`1`,x$x1,x$x2,x$x1x2,x$`x2^2`)))[1,]
w %*% (as.matrix(cbind(x$`1`,x$x1,x$x2,x$x1x2,x$`x2^2`)))[1,]
w  (as.matrix(cbind(x$`1`,x$x1,x$x2,x$x1x2,x$`x2^2`)))[1,]
(as.matrix(cbind(x$`1`,x$x1,x$x2,x$x1x2,x$`x2^2`)))[1,]
(as.matrix(cbind(x$`1`,x$x1,x$x2,x$x1x2,x$`x2^2`)))[1,]
class((as.matrix(cbind(x$`1`,x$x1,x$x2,x$x1x2,x$`x2^2`)))[1,])
(as.matrix(cbind(x$`1`,x$x1,x$x2,x$x1x2,x$`x2^2`)))[1,]
w
class(w)
w <- as.numeric(w)
w
mat <- as.matrix(cbind(x$`1`,x$x1,x$x2,x$x1x2,x$`x2^2`))
mat
w
w %*% mat
w %*% mat[1,]
w %*% w
w
mat[1,]
class(mat[1,])
w%*%(mat[1,])
w %*% mat[1,]
W
w
mat[1.,,]
mat[1,]
w
x[,]
mat[1,]
(as.matrix(cbind(x$`1`,x$x1,x$x2,x$x1x2,x$`x1^2`,x$`x2^2`)))[1,]
dat <- (as.matrix(cbind(x$`1`,x$x1,x$x2,x$x1x2,x$`x1^2`,x$`x2^2`)))
dat
dat
class(dat)
dat <- as.numeric(dat)
class(dat)
dat
dat <- (as.matrix(cbind(x$`1`,x$x1,x$x2,x$x1x2,x$`x1^2`,x$`x2^2`)))
dat
w
w %*% dat[1,]
w %*% dat
dat %*% w
dat %*% w - svm_model$rho
svm_model$decision.values
svm_model$coefs
svm_model$SV
svm_model$SV %*% svm_model$coefs
svm_model$SV %*% svm_model$coefs
svm_model$SV %*%
svm_model$SV %*%
12
svm_model$coefs
svm_model$SV
t(svm_model$coefs)%*%svm_model$SV
plot3d(x$'x1', x$'x2', x$'x1x2', col=x$'category',
xlab='x1', ylab='x2',zlab='x1x2', type='s', size=2.4)
library(rgl)
# Create some dummy data
dat <- replicate(2, 1:3)
# Initialize the scene, no data plotted
plot3d(dat, type = 'n', xlim = c(-1, 1), ylim = c(-1, 1), zlim = c(-3, 3), xlab = '', ylab = '', zlab = '')
# Add planes
planes3d(1, 1, 1, 0, col = 'red', alpha = 0.6)
planes3d(1, -1, 1, 0, col = 'orange', alpha = 0.6)
planes3d(1, -1, -1, -0.8, col = 'blue', alpha = 0.6)
svm_model$coefs
t(svm_model$coefs)%*% svm_model$SV
## train with all points
svm_model <- svm(x$category ~ ., x,kernel="linear")
summary(svm_model)
# show weights of hyperplane
t(svm_model$coefs)%*% svm_model$SV
# show negative intercept of hyperplane
svm_model$rho
predicted <- predict(svm_model, x)
validated <- (predicted==x$category)
sprintf("misclassified=%d/%d, ratio=%f",
length(validated[validated==FALSE]),
length(predicted),
length(validated[validated==FALSE])/length(predicted))
svm_model
svm_model$SV
w <- t(svm_model$coefs)%*% svm_model$SV
w
sqrt(sum(w^2))
1/sqrt(sum(w^2))
